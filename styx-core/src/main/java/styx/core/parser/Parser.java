//
// NOTE: This file has been generated by RSPT (the Really Simple Parser Tool).
//       Do not modify the contents of this file as it will be overwritten!
//
package styx.core.parser;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import styx.*;
import styx.core.expressions.*;

public class Parser {

    private char[] _input;

    public Parser() { }

    
    public Session session;

    private static <T> void appendT(Ref<ArrayList<T>> output, T obj) {
        if(output.val == null)
            output.val = new ArrayList<T>();
        output.val.add(obj);
    }

    
    private static void appendByte(Ref<ByteArrayOutputStream> output, int hex1, int hex2) {
        if(output.val == null) 
            output.val = new ByteArrayOutputStream();
        output.val.write((hex1<<4) + (hex2));
    }

    private static void appendChar(Ref<StringBuilder> output, char character) {
        if(output.val == null) 
            output.val = new StringBuilder();
        output.val.append(character);
    }
    
    private static char makeChar(Ref<Integer> hex1, Ref<Integer> hex2, Ref<Integer> hex3, Ref<Integer> hex4) {
        return (char) ((hex1.val<<12) + (hex2.val<<8) + (hex3.val<<4) + (hex4.val));
    }


    public boolean Parse_ROOT_STATEMENT_LIST(String input, final Ref<ArrayList<Expression>> output, final Ref_int pos) {
        _input     = input.toCharArray();
        pos.val    = 0;
        output.val = null;
        return nt_ROOT_STATEMENT_LIST(pos, output) && pos.val == _input.length;
    }

    public boolean Parse_ROOT_VALUE(String input, final Ref<Value> output, final Ref_int pos) {
        _input     = input.toCharArray();
        pos.val    = 0;
        output.val = null;
        return nt_ROOT_VALUE(pos, output) && pos.val == _input.length;
    }

    private boolean nt_ROOT_STATEMENT_LIST(final Ref_int pos, final Ref<ArrayList<Expression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_WSML(pos1, output1)) {
                final Ref<ArrayList<Expression>> output2 = new Ref<ArrayList<Expression>>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_STMT_BLOCK_HEAD(pos2, output2)) {
                    final Ref<Object> output3 = new Ref<Object>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EOF(pos3, output3)) {
                        output.val = output2.val;
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_ROOT_VALUE(final Ref_int pos, final Ref<Value> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_WSML(pos1, output1)) {
                final Ref<Expression> output2 = new Ref<Expression>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_VALUE(pos2, output2)) {
                    final Ref<Object> output3 = new Ref<Object>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_WSML(pos3, output3)) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_EOF(pos4, output4)) {
                            output.val = Constant.unwrap(output2.val);
                            pos.val = pos4.val;
                            return true;
                        }
                    }
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_WSML(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_EOF(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        return false;
    }

    private boolean nt_WS(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tset(pos1, t_1 /* " \t\r" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_COMMENT_C(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_COMMENT_P(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_WSML(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tset(pos1, t_2 /* " \t\r\n" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_COMMENT_C(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_COMMENT_P(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_SEP(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_WS(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_SEP2(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        return false;
    }

    private boolean nt_SEP2(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '\n')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    final Ref<Object> output3 = new Ref<Object>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_SEP3(pos3, output3)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, ',')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        return false;
    }

    private boolean nt_SEP3(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, ',')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_WSML(pos1, output1)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_COMMENT_C(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_3 /* " / *" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_COMMENT_C_TAIL(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        return false;
    }

    private boolean nt_COMMENT_P(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_4 /* " /  / " */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_COMMENT_P_TAIL(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        return false;
    }

    private boolean nt_COMMENT_C_TAIL(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_COMMENT_C(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_COMMENT_C_TAIL(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tnotset(pos1, t_5 /* "*" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_COMMENT_C_TAIL(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '*')) {
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(tnotset(pos2, t_6 /* " / " */)) {
                    final Ref<Object> output3 = new Ref<Object>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_COMMENT_C_TAIL(pos3, output3)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_7 /* "* / " */)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_COMMENT_P_TAIL(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tnotset(pos1, t_8 /* "\n" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_COMMENT_P_TAIL(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EOF(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            if(pos.val == _input.length) return true;
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tset(pos1, t_9 /* "" */)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_VALUE(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Binary> output1 = new Ref<Binary>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_BINARY(pos1, output1)) {
                output.val = new Constant(output1.val);
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref<Numeric> output1 = new Ref<Numeric>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_NUMBER(pos1, output1)) {
                output.val = new Constant(output1.val);
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref<Text> output1 = new Ref<Text>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STRING(pos1, output1)) {
                output.val = new Constant(output1.val);
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref<Expression> output1 = new Ref<Expression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_REFERENCE(pos1, output1)) {
                output.val = output1.val;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref<Expression> output1 = new Ref<Expression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_COMPLEX(pos1, output1)) {
                output.val = output1.val;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref<Expression> output1 = new Ref<Expression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_TYPE(pos1, output1)) {
                output.val = output1.val;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref<Expression> output1 = new Ref<Expression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_FUNC(pos1, output1)) {
                output.val = output1.val;
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_KEY(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '(')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output)) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WSML(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(tc(pos5, ')')) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            final Ref<Text> output1 = new Ref<Text>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_IDENT(pos1, output1)) {
                output.val = new Constant(output1.val);
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_VALUE(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_NUMBER(final Ref_int pos, final Ref<Numeric> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_NUMBER_SINTEGER(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_NUMBER_FRACTION_0(pos2, output2)) {
                    final Ref<Object> output3 = new Ref<Object>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_NUMBER_EXPONENT_0(pos3, output3)) {
                        output.val=session.number(new String(_input, pos0.val, pos3.val - pos0.val));
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_NUMBER_SINTEGER(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '-')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_NUMBER_UINTEGER(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_NUMBER_UINTEGER(pos1, output1)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_NUMBER_UINTEGER(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Integer> output1 = new Ref<Integer>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_DEC_DIGIT(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_DEC_DIGIT_0N(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        return false;
    }

    private boolean nt_NUMBER_FRACTION_0(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '.')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_NUMBER_UINTEGER(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_NUMBER_EXPONENT_0(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, 'E')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_NUMBER_SINTEGER(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_DEC_DIGIT_0N(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Integer> output1 = new Ref<Integer>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_DEC_DIGIT(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_DEC_DIGIT_0N(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_DEC_DIGIT(final Ref_int pos, final Ref<Integer> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tset(pos1, t_10 /* "0123456789" */)) {
                output.val = _input[pos1.val-1] - '0';
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_IDENT(final Ref_int pos, final Ref<Text> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_IDENT_LETTER(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_IDENT_CHAR_0N(pos2, output2)) {
                    output.val=session.text(new String(_input, pos0.val, pos2.val - pos0.val));
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        return false;
    }

    private boolean nt_IDENT_LETTER(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(trange(pos1, 'a', 'z')) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(trange(pos1, 'A', 'Z')) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '_')) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(trange(pos1, 'Ā', '￮')) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_IDENT_CHAR_0N(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_IDENT_CHAR(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_IDENT_CHAR_0N(pos2, output2)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_IDENT_CHAR(final Ref_int pos, final Ref<Object> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(trange(pos1, 'a', 'z')) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(trange(pos1, 'A', 'Z')) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '_')) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(trange(pos1, '0', '9')) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(trange(pos1, 'Ā', '￮')) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_STRING(final Ref_int pos, final Ref<Text> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '\"')) {
                final Ref<StringBuilder> output2 = new Ref<StringBuilder>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_STRING_CHAR_0N(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(tc(pos3, '\"')) {
                        output.val = session.text(output2.val != null ? output2.val.toString() : null);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STRING_CHAR_0N(final Ref_int pos, final Ref<StringBuilder> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Character> output1 = new Ref<Character>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STRING_CHAR(pos1, output1)) {
                appendChar(output, output1.val);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_STRING_CHAR_0N(pos2, output)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_STRING_CHAR(final Ref_int pos, final Ref<Character> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tnotset(pos1, t_11 /* "\\\"\t\r\n" */)) {
                output.val=_input[pos1.val-1];
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STRING_ESCAPE(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_STRING_ESCAPE(final Ref_int pos, final Ref<Character> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '\\')) {
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(tset(pos2, t_12 /* "\\\'\"" */)) {
                    output.val=_input[pos2.val-1];
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_13 /* "\\t" */)) {
                output.val='\t';
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_14 /* "\\r" */)) {
                output.val='\r';
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_15 /* "\\n" */)) {
                output.val='\n';
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_16 /* "\\u" */)) {
                final Ref<Integer> output2 = new Ref<Integer>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_HEX_DIGIT(pos2, output2)) {
                    final Ref<Integer> output3 = new Ref<Integer>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_HEX_DIGIT(pos3, output3)) {
                        final Ref<Integer> output4 = new Ref<Integer>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_HEX_DIGIT(pos4, output4)) {
                            final Ref<Integer> output5 = new Ref<Integer>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_HEX_DIGIT(pos5, output5)) {
                                output.val = makeChar(output2, output3, output4, output5);
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_BINARY(final Ref_int pos, final Ref<Binary> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_17 /* "0x" */)) {
                final Ref<ByteArrayOutputStream> output2 = new Ref<ByteArrayOutputStream>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_HEX_DIGIT_0N(pos2, output2)) {
                    output.val=session.binary(output2.val != null ? output2.val.toByteArray() : null);
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        return false;
    }

    private boolean nt_HEX_DIGIT_0N(final Ref_int pos, final Ref<ByteArrayOutputStream> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Integer> output1 = new Ref<Integer>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_HEX_DIGIT(pos1, output1)) {
                final Ref<Integer> output2 = new Ref<Integer>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_HEX_DIGIT(pos2, output2)) {
                    appendByte(output, output1.val, output2.val);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_HEX_DIGIT_0N(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_HEX_DIGIT(final Ref_int pos, final Ref<Integer> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tset(pos1, t_18 /* "0123456789" */)) {
                output.val = _input[pos1.val-1] - '0';
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tset(pos1, t_19 /* "ABCDEF" */)) {
                output.val = _input[pos1.val-1] - 'A' + 10;
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_REFERENCE(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_20 /* "[ / " */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<ArrayList<Expression>> output3 = new Ref<ArrayList<Expression>>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_REFERENCE_HEAD(pos3, output3)) {
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(tc(pos4, ']')) {
                            output.val=new ReferenceExpression(output3.val).propagateConst(session);
                            pos.val = pos4.val;
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_REFERENCE_HEAD(final Ref_int pos, final Ref<ArrayList<Expression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Expression> output1 = new Ref<Expression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_KEY(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    appendT(output, output1.val);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_REFERENCE_TAIL(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_REFERENCE_TAIL(final Ref_int pos, final Ref<ArrayList<Expression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '/')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_KEY(pos3, output3)) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            appendT(output, output3.val);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_REFERENCE_TAIL(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_WS(pos1, output1)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_COMPLEX(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '[')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    final Ref<ArrayList<PairExpression>> output3 = new Ref<ArrayList<PairExpression>>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_COMPLEX_HEAD(pos3, output3)) {
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(tc(pos4, ']')) {
                            output.val=new ComplexExpression(output3.val).propagateConst(session);
                            pos.val = pos4.val;
                            return true;
                        }
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '@')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_KEY(pos3, output3)) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref<Expression> output5 = new Ref<Expression>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPRESSION(pos5, output5)) {
                                output.val=new ComplexExpression(output3.val, output5.val).propagateConst(session);
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_COMPLEX_HEAD(final Ref_int pos, final Ref<ArrayList<PairExpression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_COMPLEX_CHILD(pos1, output)) {
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_COMPLEX_TAIL(pos2, output)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_COMPLEX_CHILD(final Ref_int pos, final Ref<ArrayList<PairExpression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Expression> output1 = new Ref<Expression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_KEY(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(tc(pos3, ':')) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref<Expression> output5 = new Ref<Expression>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPRESSION(pos5, output5)) {
                                appendT(output, new PairExpression(output1.val, output5.val));
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            final Ref<Expression> output1 = new Ref<Expression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPRESSION(pos1, output1)) {
                appendT(output, new PairExpression(output1.val, null));
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_COMPLEX_TAIL(final Ref_int pos, final Ref<ArrayList<PairExpression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_SEP(pos1, output1)) {
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_COMPLEX_CHILD(pos2, output)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_COMPLEX_TAIL(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_WSML(pos1, output1)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_TYPE(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_21 /* "::" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output3)) {
                        output.val = new UnaryOperator(UnaryOperator.Operator.TypeExpression, output3.val).propagateConst(session);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_FUNC(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_22 /* "->" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output3)) {
                        output.val = new UnaryOperator(UnaryOperator.Operator.FunctionExpression, output3.val).propagateConst(session);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPRESSION(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_BLOCK(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_RETURN(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_YIELD(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_IF(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_SWITCH(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_WHILE(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_FOR(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_FOREACH(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_BREAK(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_CONTINUE(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_TRY(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_THROW(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_ATOMIC(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_RETRY(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_DECLARATION(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_STMT_ASSIGNMENT(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_STMT_BLOCK(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '{')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    final Ref<ArrayList<Expression>> output3 = new Ref<ArrayList<Expression>>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_STMT_BLOCK_HEAD(pos3, output3)) {
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(tc(pos4, '}')) {
                            output.val=new Block(output3.val);
                            pos.val = pos4.val;
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_BLOCK_HEAD(final Ref_int pos, final Ref<ArrayList<Expression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Expression> output1 = new Ref<Expression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPRESSION(pos1, output1)) {
                appendT(output, output1.val);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_STMT_BLOCK_TAIL(pos2, output)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_STMT_BLOCK_TAIL(final Ref_int pos, final Ref<ArrayList<Expression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_SEP(pos1, output1)) {
                final Ref<Expression> output2 = new Ref<Expression>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_EXPRESSION(pos2, output2)) {
                    appendT(output, output2.val);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_STMT_BLOCK_TAIL(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_WSML(pos1, output1)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_STMT_RETURN(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_23 /* "return" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output3)) {
                        output.val=new FlowStatement(FlowStatement.Keyword.Return, output3.val);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_24 /* "return" */)) {
                output.val=new FlowStatement(FlowStatement.Keyword.Return, null);
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_STMT_YIELD(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_25 /* "yield" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output3)) {
                        output.val=new FlowStatement(FlowStatement.Keyword.Yield, output3.val);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_IF(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_26 /* "if" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(tc(pos3, '(')) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WSML(pos4, output4)) {
                            final Ref<Expression> output5 = new Ref<Expression>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPRESSION(pos5, output5)) {
                                final Ref<Object> output6 = new Ref<Object>(null);
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_WSML(pos6, output6)) {
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(tc(pos7, ')')) {
                                        final Ref<Object> output8 = new Ref<Object>(null);
                                        final Ref_int pos8 = new Ref_int(pos7.val);
                                        if(nt_WS(pos8, output8)) {
                                            final Ref<Expression> output9 = new Ref<Expression>(null);
                                            final Ref_int pos9 = new Ref_int(pos8.val);
                                            if(nt_EXPRESSION(pos9, output9)) {
                                                final Ref<Object> output10 = new Ref<Object>(null);
                                                final Ref_int pos10 = new Ref_int(pos9.val);
                                                if(nt_WS(pos10, output10)) {
                                                    final Ref<Expression> output11 = new Ref<Expression>(null);
                                                    final Ref_int pos11 = new Ref_int(pos10.val);
                                                    if(nt_STMT_ELSE_0(pos11, output11)) {
                                                        output.val=new IfElse(output5.val, output9.val, output11.val);
                                                        pos.val = pos11.val;
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_ELSE_0(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_27 /* "else" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_STMT_SWITCH(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_28 /* "switch" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(tc(pos3, '(')) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WSML(pos4, output4)) {
                            final Ref<Expression> output5 = new Ref<Expression>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPRESSION(pos5, output5)) {
                                final Ref<Object> output6 = new Ref<Object>(null);
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_WSML(pos6, output6)) {
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(tc(pos7, ')')) {
                                        final Ref<Object> output8 = new Ref<Object>(null);
                                        final Ref_int pos8 = new Ref_int(pos7.val);
                                        if(nt_WS(pos8, output8)) {
                                            final Ref_int pos9 = new Ref_int(pos8.val);
                                            if(tc(pos9, '{')) {
                                                final Ref<Object> output10 = new Ref<Object>(null);
                                                final Ref_int pos10 = new Ref_int(pos9.val);
                                                if(nt_WSML(pos10, output10)) {
                                                    final Ref<ArrayList<Expression>> output11 = new Ref<ArrayList<Expression>>(null);
                                                    final Ref_int pos11 = new Ref_int(pos10.val);
                                                    if(nt_STMT_CASE_0N(pos11, output11)) {
                                                        final Ref<Object> output12 = new Ref<Object>(null);
                                                        final Ref_int pos12 = new Ref_int(pos11.val);
                                                        if(nt_WSML(pos12, output12)) {
                                                            final Ref_int pos13 = new Ref_int(pos12.val);
                                                            if(tc(pos13, '}')) {
                                                                pos.val = pos13.val;
                                                                return true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_CASE_0N(final Ref_int pos, final Ref<ArrayList<Expression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_29 /* "case" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(tc(pos3, '(')) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WSML(pos4, output4)) {
                            final Ref<Expression> output5 = new Ref<Expression>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPRESSION(pos5, output5)) {
                                final Ref<Object> output6 = new Ref<Object>(null);
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_WSML(pos6, output6)) {
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(tc(pos7, ')')) {
                                        final Ref<Object> output8 = new Ref<Object>(null);
                                        final Ref_int pos8 = new Ref_int(pos7.val);
                                        if(nt_WS(pos8, output8)) {
                                            final Ref<Expression> output9 = new Ref<Expression>(null);
                                            final Ref_int pos9 = new Ref_int(pos8.val);
                                            if(nt_EXPRESSION(pos9, output9)) {
                                                final Ref<Object> output10 = new Ref<Object>(null);
                                                final Ref_int pos10 = new Ref_int(pos9.val);
                                                if(nt_WS(pos10, output10)) {
                                                    final Ref_int pos11 = new Ref_int(pos10.val);
                                                    if(nt_STMT_CASE_0N(pos11, output)) {
                                                        pos.val = pos11.val;
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_STMT_WHILE(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_30 /* "loop" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output3)) {
                        output.val=new While(null, null, output3.val);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_31 /* "while" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(tc(pos3, '(')) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WSML(pos4, output4)) {
                            final Ref<Expression> output5 = new Ref<Expression>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPRESSION(pos5, output5)) {
                                final Ref<Object> output6 = new Ref<Object>(null);
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_WSML(pos6, output6)) {
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(tc(pos7, ')')) {
                                        final Ref<Object> output8 = new Ref<Object>(null);
                                        final Ref_int pos8 = new Ref_int(pos7.val);
                                        if(nt_WS(pos8, output8)) {
                                            final Ref<Expression> output9 = new Ref<Expression>(null);
                                            final Ref_int pos9 = new Ref_int(pos8.val);
                                            if(nt_EXPRESSION(pos9, output9)) {
                                                output.val=new While(output5.val, null, output9.val);
                                                pos.val = pos9.val;
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_32 /* "do" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output3)) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(ts(pos5, t_33 /* "while" */)) {
                                final Ref<Object> output6 = new Ref<Object>(null);
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_WS(pos6, output6)) {
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(tc(pos7, '(')) {
                                        final Ref<Object> output8 = new Ref<Object>(null);
                                        final Ref_int pos8 = new Ref_int(pos7.val);
                                        if(nt_WSML(pos8, output8)) {
                                            final Ref<Expression> output9 = new Ref<Expression>(null);
                                            final Ref_int pos9 = new Ref_int(pos8.val);
                                            if(nt_EXPRESSION(pos9, output9)) {
                                                final Ref<Object> output10 = new Ref<Object>(null);
                                                final Ref_int pos10 = new Ref_int(pos9.val);
                                                if(nt_WSML(pos10, output10)) {
                                                    final Ref_int pos11 = new Ref_int(pos10.val);
                                                    if(tc(pos11, ')')) {
                                                        output.val=new While(null, output9.val, output3.val);
                                                        pos.val = pos11.val;
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_FOR(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_34 /* "for" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(tc(pos3, '(')) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WSML(pos4, output4)) {
                            final Ref<Expression> output5 = new Ref<Expression>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_STMT_DECLARATION(pos5, output5)) {
                                final Ref<Object> output6 = new Ref<Object>(null);
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_SEP(pos6, output6)) {
                                    final Ref<Expression> output7 = new Ref<Expression>(null);
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(nt_EXPRESSION(pos7, output7)) {
                                        final Ref<Object> output8 = new Ref<Object>(null);
                                        final Ref_int pos8 = new Ref_int(pos7.val);
                                        if(nt_SEP(pos8, output8)) {
                                            final Ref<Expression> output9 = new Ref<Expression>(null);
                                            final Ref_int pos9 = new Ref_int(pos8.val);
                                            if(nt_STMT_ASSIGNMENT(pos9, output9)) {
                                                final Ref<Object> output10 = new Ref<Object>(null);
                                                final Ref_int pos10 = new Ref_int(pos9.val);
                                                if(nt_WSML(pos10, output10)) {
                                                    final Ref_int pos11 = new Ref_int(pos10.val);
                                                    if(tc(pos11, ')')) {
                                                        final Ref<Object> output12 = new Ref<Object>(null);
                                                        final Ref_int pos12 = new Ref_int(pos11.val);
                                                        if(nt_WS(pos12, output12)) {
                                                            final Ref<Expression> output13 = new Ref<Expression>(null);
                                                            final Ref_int pos13 = new Ref_int(pos12.val);
                                                            if(nt_EXPRESSION(pos13, output13)) {
                                                                output.val=new For(output5.val, output7.val, output9.val, output13.val);
                                                                pos.val = pos13.val;
                                                                return true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_FOREACH(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_35 /* "foreach" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(tc(pos3, '(')) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WSML(pos4, output4)) {
                            final Ref<IdentifierDeclaration> output5 = new Ref<IdentifierDeclaration>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_IDENT_DECLARATION(pos5, output5)) {
                                final Ref<Object> output6 = new Ref<Object>(null);
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_WS(pos6, output6)) {
                                    final Ref<IdentifierDeclaration> output7 = new Ref<IdentifierDeclaration>(null);
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(nt_IDENT_DECLARATION_B(pos7, output7)) {
                                        final Ref<Object> output8 = new Ref<Object>(null);
                                        final Ref_int pos8 = new Ref_int(pos7.val);
                                        if(nt_WS(pos8, output8)) {
                                            final Ref_int pos9 = new Ref_int(pos8.val);
                                            if(ts(pos9, t_36 /* "in" */)) {
                                                final Ref<Object> output10 = new Ref<Object>(null);
                                                final Ref_int pos10 = new Ref_int(pos9.val);
                                                if(nt_WS(pos10, output10)) {
                                                    final Ref<Expression> output11 = new Ref<Expression>(null);
                                                    final Ref_int pos11 = new Ref_int(pos10.val);
                                                    if(nt_EXPRESSION(pos11, output11)) {
                                                        final Ref<Object> output12 = new Ref<Object>(null);
                                                        final Ref_int pos12 = new Ref_int(pos11.val);
                                                        if(nt_WSML(pos12, output12)) {
                                                            final Ref_int pos13 = new Ref_int(pos12.val);
                                                            if(tc(pos13, ')')) {
                                                                final Ref<Object> output14 = new Ref<Object>(null);
                                                                final Ref_int pos14 = new Ref_int(pos13.val);
                                                                if(nt_WS(pos14, output14)) {
                                                                    final Ref<Expression> output15 = new Ref<Expression>(null);
                                                                    final Ref_int pos15 = new Ref_int(pos14.val);
                                                                    if(nt_EXPRESSION(pos15, output15)) {
                                                                        output.val=new ForEach(output5.val, output7.val, output11.val, output15.val);
                                                                        pos.val = pos15.val;
                                                                        return true;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_BREAK(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_37 /* "break" */)) {
                output.val=new FlowStatement(FlowStatement.Keyword.Break, null);
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_STMT_CONTINUE(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_38 /* "continue" */)) {
                output.val=new FlowStatement(FlowStatement.Keyword.Continue, null);
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_STMT_TRY(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_39 /* "try" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_STMT_BLOCK(pos3, output3)) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref<Expression> output5 = new Ref<Expression>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_STMT_CATCH_0(pos5, output5)) {
                                final Ref<Object> output6 = new Ref<Object>(null);
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_WS(pos6, output6)) {
                                    final Ref<Expression> output7 = new Ref<Expression>(null);
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(nt_STMT_FINALLY_0(pos7, output7)) {
                                        output.val=new TryCatchFinally(output3.val, output5.val, output7.val);
                                        pos.val = pos7.val;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_CATCH_0(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_40 /* "catch" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(tc(pos3, '(')) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WSML(pos4, output4)) {
                            final Ref<IdentifierDeclaration> output5 = new Ref<IdentifierDeclaration>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_IDENT_DECLARATION(pos5, output5)) {
                                final Ref<Object> output6 = new Ref<Object>(null);
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_WSML(pos6, output6)) {
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(tc(pos7, ')')) {
                                        final Ref<Object> output8 = new Ref<Object>(null);
                                        final Ref_int pos8 = new Ref_int(pos7.val);
                                        if(nt_WS(pos8, output8)) {
                                            final Ref_int pos9 = new Ref_int(pos8.val);
                                            if(nt_STMT_BLOCK(pos9, output)) {
                                                pos.val = pos9.val;
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_STMT_FINALLY_0(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_41 /* "finally" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_STMT_BLOCK(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_STMT_THROW(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_42 /* "throw" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output3)) {
                        output.val=new FlowStatement(FlowStatement.Keyword.Throw, output3.val);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_ATOMIC(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_43 /* "atomic" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_STMT_BLOCK(pos3, output3)) {
                        output.val=new Atomic(output3.val);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_RETRY(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_44 /* "retry" */)) {
                output.val=new FlowStatement(FlowStatement.Keyword.Retry, null);
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_STMT_DECLARATION(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<IdentifierDeclaration> output1 = new Ref<IdentifierDeclaration>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_IDENT_DECLARATION(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Declaration.Operator> output3 = new Ref<Declaration.Operator>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_OP_DECLARATION(pos3, output3)) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref<Expression> output5 = new Ref<Expression>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPRESSION(pos5, output5)) {
                                output.val = new Declaration(output3.val, output1.val, output5.val);
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_OP_DECLARATION(final Ref_int pos, final Ref<Declaration.Operator> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_45 /* ":===" */)) {
                output.val = Declaration.Operator.DeclareConstant;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_46 /* ":==" */)) {
                output.val = Declaration.Operator.DeclareImmutableVariable;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_47 /* ":=" */)) {
                output.val = Declaration.Operator.DeclareMutableVariable;
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_IDENT_DECLARATION(final Ref_int pos, final Ref<IdentifierDeclaration> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Text> output1 = new Ref<Text>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_IDENT(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_TYPE_0(pos3, output3)) {
                        output.val = new IdentifierDeclaration(output1.val, output3.val);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_IDENT_DECLARATION_B(final Ref_int pos, final Ref<IdentifierDeclaration> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, ',')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_IDENT_DECLARATION(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EXPR_TYPE_0(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_TYPE(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EXPR_TYPE(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_48 /* "::" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_ASSIGNMENT(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Expression> output1 = new Ref<Expression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_COAL(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    output.val = output1.val;
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_STMT_OPASSIGN_0(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_STMT_OPASSIGN_0(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Assignment.Operator> output1 = new Ref<Assignment.Operator>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_OP_ASSIGN(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output3)) {
                        output.val = new Assignment(output1.val, output.val, output3.val);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_OP_ASSIGN(final Ref_int pos, final Ref<Assignment.Operator> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '=')) {
                output.val = Assignment.Operator.Assign;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_49 /* "??=" */)) {
                output.val = Assignment.Operator.AssignCoal;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_50 /* "||=" */)) {
                output.val = Assignment.Operator.AssignOr;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_51 /* "&&=" */)) {
                output.val = Assignment.Operator.AssignAnd;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_52 /* "|=" */)) {
                output.val = Assignment.Operator.AssignBitOr;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_53 /* "^=" */)) {
                output.val = Assignment.Operator.AssignBitXor;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_54 /* "&=" */)) {
                output.val = Assignment.Operator.AssignBitAnd;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_55 /* "++=" */)) {
                output.val = Assignment.Operator.AssignConcat;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_56 /* "<<=" */)) {
                output.val = Assignment.Operator.AssignShl;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_57 /* ">>=" */)) {
                output.val = Assignment.Operator.AssignShr;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_58 /* "+=" */)) {
                output.val = Assignment.Operator.AssignAdd;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_59 /* "-=" */)) {
                output.val = Assignment.Operator.AssignSub;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_60 /* "*=" */)) {
                output.val = Assignment.Operator.AssignMul;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_61 /* " / =" */)) {
                output.val = Assignment.Operator.AssignDiv;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_62 /* "%=" */)) {
                output.val = Assignment.Operator.AssignMod;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_63 /* "**=" */)) {
                output.val = Assignment.Operator.AssignPow;
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_EXPR_COAL(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_OR(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPCOAL(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPCOAL(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_64 /* "??" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OR(pos3, output3)) {
                        output.val = new BinaryOperator(BinaryOperator.Operator.Coal, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPCOAL(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EXPR_OR(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_AND(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPOR(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPOR(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_65 /* "||" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_AND(pos3, output3)) {
                        output.val = new BinaryOperator(BinaryOperator.Operator.Or, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPOR(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EXPR_AND(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_BITOR(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPAND(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPAND(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_66 /* "&&" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_BITOR(pos3, output3)) {
                        output.val = new BinaryOperator(BinaryOperator.Operator.And, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPAND(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EXPR_BITOR(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_BITXOR(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPBITOR(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPBITOR(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '|')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_BITXOR(pos3, output3)) {
                        output.val = new BinaryOperator(BinaryOperator.Operator.BitOr, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPBITOR(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EXPR_BITXOR(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_BITAND(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPBITXOR(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPBITXOR(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '^')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_BITAND(pos3, output3)) {
                        output.val = new BinaryOperator(BinaryOperator.Operator.BitXor, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPBITXOR(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EXPR_BITAND(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_CMP(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPBITAND(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPBITAND(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '&')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_CMP(pos3, output3)) {
                        output.val = new BinaryOperator(BinaryOperator.Operator.BitAnd, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPBITAND(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EXPR_CMP(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_REL(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPCMP(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPCMP(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<BinaryOperator.Operator> output1 = new Ref<BinaryOperator.Operator>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_OP_CMP(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_REL(pos3, output3)) {
                        output.val = new BinaryOperator(output1.val, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPCMP(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_OP_CMP(final Ref_int pos, final Ref<BinaryOperator.Operator> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_67 /* "<=>" */)) {
                output.val = BinaryOperator.Operator.Compare;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_68 /* "==" */)) {
                output.val = BinaryOperator.Operator.Equal;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_69 /* "!=" */)) {
                output.val = BinaryOperator.Operator.NotEqual;
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_EXPR_REL(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_CAT(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPREL(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPREL(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<BinaryOperator.Operator> output1 = new Ref<BinaryOperator.Operator>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_OP_REL(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_CAT(pos3, output3)) {
                        output.val = new BinaryOperator(output1.val, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPREL(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_OP_REL(final Ref_int pos, final Ref<BinaryOperator.Operator> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_70 /* "<=" */)) {
                output.val = BinaryOperator.Operator.LessOrEqual;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '<')) {
                output.val = BinaryOperator.Operator.Less;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_71 /* ">=" */)) {
                output.val = BinaryOperator.Operator.GreaterOrEqual;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '>')) {
                output.val = BinaryOperator.Operator.Greater;
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_EXPR_CAT(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_SHIFT(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPCAT(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPCAT(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_72 /* "++" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_SHIFT(pos3, output3)) {
                        output.val = new BinaryOperator(BinaryOperator.Operator.Concat, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPCAT(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EXPR_SHIFT(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_ADD(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPSHIFT(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPSHIFT(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<BinaryOperator.Operator> output1 = new Ref<BinaryOperator.Operator>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_OP_SHIFT(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_ADD(pos3, output3)) {
                        output.val = new BinaryOperator(output1.val, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPSHIFT(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_OP_SHIFT(final Ref_int pos, final Ref<BinaryOperator.Operator> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_73 /* "<<" */)) {
                output.val = BinaryOperator.Operator.Shl;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_74 /* ">>" */)) {
                output.val = BinaryOperator.Operator.Shr;
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_EXPR_ADD(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_MUL(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPADD(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPADD(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<BinaryOperator.Operator> output1 = new Ref<BinaryOperator.Operator>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_OP_ADD(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_MUL(pos3, output3)) {
                        output.val = new BinaryOperator(output1.val, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPADD(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_OP_ADD(final Ref_int pos, final Ref<BinaryOperator.Operator> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '+')) {
                output.val = BinaryOperator.Operator.Add;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '-')) {
                output.val = BinaryOperator.Operator.Sub;
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_EXPR_MUL(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_POW(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPMUL(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPMUL(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<BinaryOperator.Operator> output1 = new Ref<BinaryOperator.Operator>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_OP_MUL(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_POW(pos3, output3)) {
                        output.val = new BinaryOperator(output1.val, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPMUL(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_OP_MUL(final Ref_int pos, final Ref<BinaryOperator.Operator> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '*')) {
                output.val = BinaryOperator.Operator.Mul;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '/')) {
                output.val = BinaryOperator.Operator.Div;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '%')) {
                output.val = BinaryOperator.Operator.Mod;
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_EXPR_POW(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_PREFIX(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPPOW(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPPOW(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_75 /* "**" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_PREFIX(pos3, output3)) {
                        output.val = new BinaryOperator(BinaryOperator.Operator.Pow, output.val, output3.val);
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPPOW(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_EXPR_PREFIX(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<UnaryOperator.Operator> output1 = new Ref<UnaryOperator.Operator>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_PREFIX_OP(pos1, output1)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_PREFIX(pos3, output3)) {
                        output.val = new UnaryOperator(output1.val, output3.val).propagateConst(session);
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_CALL(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_PREFIX_OP(final Ref_int pos, final Ref<UnaryOperator.Operator> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '!')) {
                output.val = UnaryOperator.Operator.Not;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '-')) {
                output.val = UnaryOperator.Operator.Neg;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '~')) {
                output.val = UnaryOperator.Operator.BitNot;
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_EXPR_CALL(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_LEAF(pos1, output)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPR_OPCALL(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_EXPR_OPCALL(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '(')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    final Ref<ArrayList<Expression>> output3 = new Ref<ArrayList<Expression>>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_CALL_ARGS(pos3, output3)) {
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(tc(pos4, ')')) {
                            output.val = new Call(output.val, output3.val);
                            final Ref<Object> output5 = new Ref<Object>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_WS(pos5, output5)) {
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_EXPR_OPCALL(pos6, output)) {
                                    pos.val = pos6.val;
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '.')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Text> output3 = new Ref<Text>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_IDENT(pos3, output3)) {
                        output.val = new BinaryOperator(BinaryOperator.Operator.Child, output.val, new Constant(output3.val));
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_EXPR_OPCALL(pos5, output)) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '[')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    final Ref<Expression> output3 = new Ref<Expression>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output3)) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WS(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(tc(pos5, ']')) {
                                output.val = new BinaryOperator(BinaryOperator.Operator.Child, output.val, output3.val);
                                final Ref<Object> output6 = new Ref<Object>(null);
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(nt_WS(pos6, output6)) {
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(nt_EXPR_OPCALL(pos7, output)) {
                                        pos.val = pos7.val;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(ts(pos1, t_76 /* "[*]" */)) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WS(pos2, output2)) {
                    output.val = new ReferenceContent(output.val);
                    final Ref<Object> output3 = new Ref<Object>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_WS(pos3, output3)) {
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_EXPR_OPCALL(pos4, output)) {
                            pos.val = pos4.val;
                            return true;
                        }
                    }
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_CALL_ARGS(final Ref_int pos, final Ref<ArrayList<Expression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Expression> output1 = new Ref<Expression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPRESSION(pos1, output1)) {
                appendT(output, output1.val);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_CALL_TAIL(pos2, output)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_CALL_TAIL(final Ref_int pos, final Ref<ArrayList<Expression>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_SEP(pos1, output1)) {
                final Ref<Expression> output2 = new Ref<Expression>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_EXPRESSION(pos2, output2)) {
                    appendT(output, output2.val);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_CALL_TAIL(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_WSML(pos1, output1)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_EXPR_LEAF(final Ref_int pos, final Ref<Expression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Text> output1 = new Ref<Text>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_IDENT(pos1, output1)) {
                output.val = new Variable(output1.val);
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref<FunctionExpression> output1 = new Ref<FunctionExpression>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_EXPR_FUNC(pos1, output1)) {
                output.val = output1.val;
                pos.val = pos1.val;
                return true;
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '(')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_EXPRESSION(pos3, output)) {
                        final Ref<Object> output4 = new Ref<Object>(null);
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(nt_WSML(pos4, output4)) {
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(tc(pos5, ')')) {
                                pos.val = pos5.val;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_VALUE(pos1, output)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean nt_EXPR_FUNC(final Ref_int pos, final Ref<FunctionExpression> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(tc(pos1, '(')) {
                final Ref<Object> output2 = new Ref<Object>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_WSML(pos2, output2)) {
                    final Ref<ArrayList<IdentifierDeclaration>> output3 = new Ref<ArrayList<IdentifierDeclaration>>(null);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_FUNC_ARGS(pos3, output3)) {
                        final Ref_int pos4 = new Ref_int(pos3.val);
                        if(tc(pos4, ')')) {
                            final Ref<Object> output5 = new Ref<Object>(null);
                            final Ref_int pos5 = new Ref_int(pos4.val);
                            if(nt_WS(pos5, output5)) {
                                final Ref_int pos6 = new Ref_int(pos5.val);
                                if(ts(pos6, t_77 /* "->" */)) {
                                    final Ref<Object> output7 = new Ref<Object>(null);
                                    final Ref_int pos7 = new Ref_int(pos6.val);
                                    if(nt_WS(pos7, output7)) {
                                        final Ref<Expression> output8 = new Ref<Expression>(null);
                                        final Ref_int pos8 = new Ref_int(pos7.val);
                                        if(nt_EXPRESSION(pos8, output8)) {
                                            output.val = new FunctionExpression(false, output3.val, output8.val);
                                            pos.val = pos8.val;
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean nt_FUNC_ARGS(final Ref_int pos, final Ref<ArrayList<IdentifierDeclaration>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<IdentifierDeclaration> output1 = new Ref<IdentifierDeclaration>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_IDENT_DECLARATION(pos1, output1)) {
                appendT(output, output1.val);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_FUNC_TAIL(pos2, output)) {
                    pos.val = pos2.val;
                    return true;
                }
            }
        }
        {
            pos.val = pos0.val;
            return true;
        }
    }

    private boolean nt_FUNC_TAIL(final Ref_int pos, final Ref<ArrayList<IdentifierDeclaration>> output) {
        final Ref_int pos0 = new Ref_int(pos.val);
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_SEP(pos1, output1)) {
                final Ref<IdentifierDeclaration> output2 = new Ref<IdentifierDeclaration>(null);
                final Ref_int pos2 = new Ref_int(pos1.val);
                if(nt_IDENT_DECLARATION(pos2, output2)) {
                    appendT(output, output2.val);
                    final Ref_int pos3 = new Ref_int(pos2.val);
                    if(nt_FUNC_TAIL(pos3, output)) {
                        pos.val = pos3.val;
                        return true;
                    }
                }
            }
        }
        {
            final Ref<Object> output1 = new Ref<Object>(null);
            final Ref_int pos1 = new Ref_int(pos0.val);
            if(nt_WSML(pos1, output1)) {
                pos.val = pos1.val;
                return true;
            }
        }
        return false;
    }

    private boolean ts(final Ref_int pos, char[] s) {
        for(char c : s) {
            if(pos.val >= _input.length || _input[pos.val] != c) return false;
            pos.val++;
        }
        return true;
    }

    private boolean tc(final Ref_int pos, char c) {
        if(pos.val >= _input.length || _input[pos.val] != c) return false;
        pos.val++;
        return true;
    }

    private boolean tset(final Ref_int pos, char[] s) {
        for(int i = 0; i < s.length; i++) {
            if(pos.val < _input.length && s[i] == _input[pos.val]) {
                pos.val++;
                return true;
            }
        }
        return false;
    }

    private boolean trange(final Ref_int pos, char c1, char c2) {
        if(pos.val >= _input.length || _input[pos.val] < c1 || _input[pos.val] > c2) return false;
        pos.val++;
        return true;
    }

    private boolean tnotset(final Ref_int pos, char[] s) {
        for(int i = 0; i < s.length; i++) {
            if(pos.val >= _input.length || s[i] == _input[pos.val]) {
                return false;
            }
        }
        pos.val++;
        return true;
    }

    private static final char[] t_1 = " \t\r".toCharArray();
    private static final char[] t_2 = " \t\r\n".toCharArray();
    private static final char[] t_3 = "/*".toCharArray();
    private static final char[] t_4 = "//".toCharArray();
    private static final char[] t_5 = "*".toCharArray();
    private static final char[] t_6 = "/".toCharArray();
    private static final char[] t_7 = "*/".toCharArray();
    private static final char[] t_8 = "\n".toCharArray();
    private static final char[] t_9 = "".toCharArray();
    private static final char[] t_10 = "0123456789".toCharArray();
    private static final char[] t_11 = "\\\"\t\r\n".toCharArray();
    private static final char[] t_12 = "\\\'\"".toCharArray();
    private static final char[] t_13 = "\\t".toCharArray();
    private static final char[] t_14 = "\\r".toCharArray();
    private static final char[] t_15 = "\\n".toCharArray();
    private static final char[] t_16 = "\\u".toCharArray();
    private static final char[] t_17 = "0x".toCharArray();
    private static final char[] t_18 = "0123456789".toCharArray();
    private static final char[] t_19 = "ABCDEF".toCharArray();
    private static final char[] t_20 = "[/".toCharArray();
    private static final char[] t_21 = "::".toCharArray();
    private static final char[] t_22 = "->".toCharArray();
    private static final char[] t_23 = "return".toCharArray();
    private static final char[] t_24 = "return".toCharArray();
    private static final char[] t_25 = "yield".toCharArray();
    private static final char[] t_26 = "if".toCharArray();
    private static final char[] t_27 = "else".toCharArray();
    private static final char[] t_28 = "switch".toCharArray();
    private static final char[] t_29 = "case".toCharArray();
    private static final char[] t_30 = "loop".toCharArray();
    private static final char[] t_31 = "while".toCharArray();
    private static final char[] t_32 = "do".toCharArray();
    private static final char[] t_33 = "while".toCharArray();
    private static final char[] t_34 = "for".toCharArray();
    private static final char[] t_35 = "foreach".toCharArray();
    private static final char[] t_36 = "in".toCharArray();
    private static final char[] t_37 = "break".toCharArray();
    private static final char[] t_38 = "continue".toCharArray();
    private static final char[] t_39 = "try".toCharArray();
    private static final char[] t_40 = "catch".toCharArray();
    private static final char[] t_41 = "finally".toCharArray();
    private static final char[] t_42 = "throw".toCharArray();
    private static final char[] t_43 = "atomic".toCharArray();
    private static final char[] t_44 = "retry".toCharArray();
    private static final char[] t_45 = ":===".toCharArray();
    private static final char[] t_46 = ":==".toCharArray();
    private static final char[] t_47 = ":=".toCharArray();
    private static final char[] t_48 = "::".toCharArray();
    private static final char[] t_49 = "??=".toCharArray();
    private static final char[] t_50 = "||=".toCharArray();
    private static final char[] t_51 = "&&=".toCharArray();
    private static final char[] t_52 = "|=".toCharArray();
    private static final char[] t_53 = "^=".toCharArray();
    private static final char[] t_54 = "&=".toCharArray();
    private static final char[] t_55 = "++=".toCharArray();
    private static final char[] t_56 = "<<=".toCharArray();
    private static final char[] t_57 = ">>=".toCharArray();
    private static final char[] t_58 = "+=".toCharArray();
    private static final char[] t_59 = "-=".toCharArray();
    private static final char[] t_60 = "*=".toCharArray();
    private static final char[] t_61 = "/=".toCharArray();
    private static final char[] t_62 = "%=".toCharArray();
    private static final char[] t_63 = "**=".toCharArray();
    private static final char[] t_64 = "??".toCharArray();
    private static final char[] t_65 = "||".toCharArray();
    private static final char[] t_66 = "&&".toCharArray();
    private static final char[] t_67 = "<=>".toCharArray();
    private static final char[] t_68 = "==".toCharArray();
    private static final char[] t_69 = "!=".toCharArray();
    private static final char[] t_70 = "<=".toCharArray();
    private static final char[] t_71 = ">=".toCharArray();
    private static final char[] t_72 = "++".toCharArray();
    private static final char[] t_73 = "<<".toCharArray();
    private static final char[] t_74 = ">>".toCharArray();
    private static final char[] t_75 = "**".toCharArray();
    private static final char[] t_76 = "[*]".toCharArray();
    private static final char[] t_77 = "->".toCharArray();

    public final static class Ref <T> {
        public T val;
        public Ref(T val) { this.val = val; }
    }

    public final static class Ref_int {
        public int val;
        public Ref_int(int val) { this.val = val; }
    }
}
